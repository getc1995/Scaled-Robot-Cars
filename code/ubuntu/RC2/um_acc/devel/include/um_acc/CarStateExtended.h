// Generated by gencpp from file um_acc/CarStateExtended.msg
// DO NOT EDIT!


#ifndef UM_ACC_MESSAGE_CARSTATEEXTENDED_H
#define UM_ACC_MESSAGE_CARSTATEEXTENDED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace um_acc
{
template <class ContainerAllocator>
struct CarStateExtended_
{
  typedef CarStateExtended_<ContainerAllocator> Type;

  CarStateExtended_()
    : v(0.0)
    , h(0.0)
    , vl(0.0)
    , actual_v(0.0)
    , u(0.0)
    , rpm(0.0)
    , pwm(0)  {
    }
  CarStateExtended_(const ContainerAllocator& _alloc)
    : v(0.0)
    , h(0.0)
    , vl(0.0)
    , actual_v(0.0)
    , u(0.0)
    , rpm(0.0)
    , pwm(0)  {
    }



   typedef double _v_type;
  _v_type v;

   typedef double _h_type;
  _h_type h;

   typedef double _vl_type;
  _vl_type vl;

   typedef double _actual_v_type;
  _actual_v_type actual_v;

   typedef double _u_type;
  _u_type u;

   typedef double _rpm_type;
  _rpm_type rpm;

   typedef int32_t _pwm_type;
  _pwm_type pwm;




  typedef boost::shared_ptr< ::um_acc::CarStateExtended_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::um_acc::CarStateExtended_<ContainerAllocator> const> ConstPtr;

}; // struct CarStateExtended_

typedef ::um_acc::CarStateExtended_<std::allocator<void> > CarStateExtended;

typedef boost::shared_ptr< ::um_acc::CarStateExtended > CarStateExtendedPtr;
typedef boost::shared_ptr< ::um_acc::CarStateExtended const> CarStateExtendedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::um_acc::CarStateExtended_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::um_acc::CarStateExtended_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace um_acc

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'um_acc': ['/home/ubuntu/rccar_catkin_ws/src/um_acc/msg', '/home/ubuntu/rccar_catkin_ws/src/um_acc/msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::um_acc::CarStateExtended_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::um_acc::CarStateExtended_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::um_acc::CarStateExtended_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::um_acc::CarStateExtended_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::um_acc::CarStateExtended_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::um_acc::CarStateExtended_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::um_acc::CarStateExtended_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef628cb5970a968519ec0bdb7758cba0";
  }

  static const char* value(const ::um_acc::CarStateExtended_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef628cb5970a9685ULL;
  static const uint64_t static_value2 = 0x19ec0bdb7758cba0ULL;
};

template<class ContainerAllocator>
struct DataType< ::um_acc::CarStateExtended_<ContainerAllocator> >
{
  static const char* value()
  {
    return "um_acc/CarStateExtended";
  }

  static const char* value(const ::um_acc::CarStateExtended_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::um_acc::CarStateExtended_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 v\n\
float64 h\n\
float64 vl\n\
float64 actual_v\n\
float64 u\n\
float64 rpm\n\
int32 pwm\n\
";
  }

  static const char* value(const ::um_acc::CarStateExtended_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::um_acc::CarStateExtended_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.v);
      stream.next(m.h);
      stream.next(m.vl);
      stream.next(m.actual_v);
      stream.next(m.u);
      stream.next(m.rpm);
      stream.next(m.pwm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct CarStateExtended_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::um_acc::CarStateExtended_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::um_acc::CarStateExtended_<ContainerAllocator>& v)
  {
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "h: ";
    Printer<double>::stream(s, indent + "  ", v.h);
    s << indent << "vl: ";
    Printer<double>::stream(s, indent + "  ", v.vl);
    s << indent << "actual_v: ";
    Printer<double>::stream(s, indent + "  ", v.actual_v);
    s << indent << "u: ";
    Printer<double>::stream(s, indent + "  ", v.u);
    s << indent << "rpm: ";
    Printer<double>::stream(s, indent + "  ", v.rpm);
    s << indent << "pwm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pwm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UM_ACC_MESSAGE_CARSTATEEXTENDED_H
