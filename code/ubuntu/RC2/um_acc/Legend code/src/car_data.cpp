#include "ros/ros.h"#include "um_acc/Pwm.h"#include "um_acc/Lane.h"#include "um_acc/Sensor.h"#include <iostream>#include <fstream>using namespace std;unsigned int vel_pwm = 0, steer_pwm = 0;float y = 0, phi = 0, h = 0, rpm = 0;ofstream outfile;float tdata;void pwmCallback(const um_acc::Pwm::ConstPtr& msg){  vel_pwm = msg->vel_pwm;  steer_pwm = msg->steer_pwm;  ROS_INFO("distance: [%f] rpm: [%f] y: [%f] phi: [%f] vel_pwm: [%d] steer_pwm: [%d]", h, rpm, y, phi, msg->vel_pwm, msg->steer_pwm);  outfile << ros::Time::now().sec << "." << ros::Time::now().nsec << " " << h  << " " << rpm << " " << y << " " << phi << " " << vel_pwm << " " << steer_pwm << endl;}void laneCallback(const um_acc::Lane::ConstPtr& msg){  y = msg->y;  phi = msg->phi;  ROS_INFO("distance: [%f] rpm: [%f] y: [%f] phi: [%f] vel_pwm: [%d] steer_pwm: [%d]", h, rpm, msg->y, msg->phi, vel_pwm, steer_pwm);  outfile << ros::Time::now().sec << "." << ros::Time::now().nsec << " " << h  << " " << rpm << " " << y << " " << phi << " " << vel_pwm << " " << steer_pwm << endl;}void sensorCallback(const um_acc::Sensor::ConstPtr& msg){  h = msg->distance;  rpm = msg->rpm;  ROS_INFO("distance: [%f] rpm: [%f] y: [%f] phi: [%f] vel_pwm: [%d] steer_pwm: [%d]", msg->distance, msg->rpm, y, phi, vel_pwm, steer_pwm);  outfile << ros::Time::now().sec << "." << ros::Time::now().nsec << " " << h  << " " << rpm << " " << y << " " << phi << " " << vel_pwm << " " << steer_pwm << endl;} int main(int argc, char **argv){  outfile.open("drive_data.txt");  ros::init(argc, argv, "listener");  ros::NodeHandle n;  ros::Subscriber pwm_data = n.subscribe("pwm_control", 1000, pwmCallback);  ros::Subscriber vision_data = n.subscribe("lane_data", 1000, laneCallback);  ros::Subscriber sensor_data = n.subscribe("sensor", 1000, sensorCallback);  ros::spin();  return 0;}